// DAZ Studio Script

var appName = "export_highdef_to_blender";
var version = 0.7;

function exportHighdefToBlender()
{
    // Write the line
    var filepath = FileDialog.doFileDialog( 
        false, 
        "Save As", 
        getScenePath(), 
        "DBZ Files (*.dbz *.duf)" 
        );
    if( !filepath )
    {
        return;
    }
    
    var date1 = new Date();
    var time1 = date1.getTime(); 
    var buf = "";
        
    buf = addLine(buf, "{");
    buf = addLine(buf, "    \"application\": \"export_highdef_to_blender\",");
    buf = addLine(buf, "    \"version\": " + version + ",");
    
    buf = addLine(buf, "    \"figures\": [");

    for ( var i = 0; i < Scene.getNumNodes(); i++ )
    {
        var node = Scene.getNode(i);

        if ( node.inherits( "DzSkeleton" ) )
        {
            buf = doFigure(buf, node);
        }
        else
        {
            obj = node.getObject();
            if (obj != null) 
            {
                buf = doMesh(buf, obj, true, node, "        ]", "    },");
            }
        }
    }

    buf = addLine(buf, "    {" );
    buf = addLine(buf, "        \"name\": \"dummy\",");
    buf = addLine(buf, "        \"num verts\": 0");
    buf = addLine(buf, "    }" );
    
    buf = addLine(buf, "    ]");
    buf = addLine(buf, "}" );

    var date2 = new Date();
    var time2 = date2.getTime(); 

    fp = new DzGZFile( filepath );
    fp.open( fp.WriteOnly );
    fp.writeLine(buf);
    fp.close();
    
    var date3 = new Date();
    var time3 = date3.getTime(); 
    dtime1 = (time2-time1)/1000;
    dtime2 = (time3-time2)/1000;
    dtime = (time3-time1)/1000;

    msg = ("File \"" + filepath + "\"\n" +
    	   "saved in " + dtime + " seconds.\n" +
           "Generate lines: " + dtime1 + "seconds.\n" +
           "Write to disk: " + dtime2 + "seconds.")
    MessageBox.information( msg, appName, "&OK" );
}

//===============================================================================
//
//===============================================================================

function doFigure (buf, figure)
{
    figure.finalize();
    var flabel = figure.getLabel();
    buf = startObject(buf, figure, flabel);

    var obj = figure.getObject();
    if (obj != null) 
    {
        buf = doMesh(buf, obj, false, figure, "        ],", "")
    }
    
    var bones = figure.getAllBones();
    var n = bones.length;
    
    buf = addLine(buf, "        \"bones\": ");
    buf = addLine(buf, "        [");  
    c = ","
    for( var i = 0; i < n; i++ )
    {
        bone = bones[i];
        bone.finalize();
        buf = addLine(buf, "            {");
        buf = addLine(buf, "                \"name\": \""+ bone.name + "\",");
        buf = addLine(buf, "                \"center_point\": " + bone.getOrigin() + ",");
        buf = addLine(buf, "                \"end_point\": " + bone.getEndPoint() + ",");     
        buf = addLine(buf, "                \"orientation\": " + bone.getOrientation() + ",");             
        buf = addLine(buf, "                \"origin\": " + bone.getOrigin() + ",");             
        buf = addLine(buf, "                \"rotation_order\": \"" + bone.getRotationOrder() + "\",");             
        buf = addLine(buf, "                \"ws_pos\": " + bone.getWSPos() + ",");     
        buf = addLine(buf, "                \"ws_rot\": " + bone.getWSRot() + ",");     
        buf = addLine(buf, "                \"ws_scale\": " + bone.getWSScale() + ",");     
        buf = addLine(buf, "                \"ws_transform\": " + bone.getWSTransform() );             
        if (i == n-1) c = "";
        buf = addLine(buf, "            }" + c );
    }
    buf = addLine(buf, "        ]");      
    buf = addLine(buf, "    }," ); 
    return buf;
}

//===============================================================================
//
//===============================================================================

function startObject(buf, node, label)
{
    buf = addLine(buf, "    {" );
    buf = addLine(buf, "        \"name\": \"" + node.name + "\",");
    buf = addLine(buf, "        \"label\": \"" + label + "\",");
    buf = addLine(buf, "        \"center_point\": " + node.getOrigin() + ",");
    buf = addLine(buf, "        \"end_point\": " + node.getEndPoint() + ",");     
    return buf;
}


function doMesh (buf, obj, start, node, str1, str2)
{
    var shape = obj.getCurrentShape();
    if (shape == null)
        return false;
    var lodctrl = shape.getLODControl();
    var lodvalue = lodctrl.getValue();
    var level = shape.getSubDDrawLevel();    

    if (start)
    {
        buf = startObject(buf, node, "undefined");
    }

    // Write HD data
    //obj.forceCacheUpdate(node,false);   
    var geom = obj.getCachedGeom();
    buf = addLine(buf, "        \"lod\": " + lodvalue + ",");
    buf = addLine(buf, "        \"subd level\": " + level + ",");
    buf = writeVertices(buf, geom, geom, "hd ");
    buf = addLine(buf, "        ],");
    buf = writeNormals(buf, geom, "hd ");
    buf = writeUVs(buf, geom, "hd ");
    buf = writeFaces(buf, geom, "hd ");
    buf = writeMaterialGroups(buf, geom, "hd ");

    // Turn off high resolution
    lodctrl.setValue(0);
    obj.forceCacheUpdate(node,false);   
        
    var geom = obj.getCachedGeom();
    if (geom == null)
    	return endMesh(buf, str1, str2);
    var mesh = shape.getFacetMesh( false );
    if (mesh == null)
    	return endMesh(buf, str1, str2);

    buf = writeMaterials(buf, shape);
    buf = writeUVs(buf, mesh, "");
    buf = writeNormals(buf, mesh, "");
    buf = writeFaces(buf, mesh, "");
    buf = writeVertices(buf, mesh, geom, "")    
    buf = addLine(buf, str1)
    buf = addLine(buf, str2)    
    lodctrl.setValue(lodvalue);    
    return buf;
}

function endMesh(buf, str1, str2)
{
    buf = addLine(buf, "        \"dummy\": 0")
    return addLine(buf, str2);
}

function writeMaterials(buf, shape)
{
    var nm = shape.getNumMaterials();
    buf = addLine(buf, "        \"num materials\": " + nm + ",");
    buf = addLine(buf, "        \"materials\": [" );

    var c = ","
    for (var i = 0; i < nm; i++)
    {
        var mat = shape.getMaterial(i);
        if (i == nm-1) c = "";
        buf = addLine(buf, "            \"" + mat.name + "\"" + c);
    }    
    return addLine(buf, "        ],");
}

function writeMaterialGroups(buf, geom, hd)
{
    var nm = geom.getNumMaterialGroups();
    buf = addLine(buf, "        \"num " + hd + "material groups\": " + nm + ",");
    buf = addLine(buf, "        \"" + hd + "material groups\": [" );

    var c = ","
    for (var i = 0; i < nm; i++)
    {
        var mat = geom.getMaterialGroup(i);
        if (i == nm-1) c = "";
        buf = addLine(buf, "            \"" + mat.name + "\"" + c);
    }    
    return addLine(buf, "        ],");
}

function writeVertices(buf, mesh, geom, hd)
{    
    var nv = mesh.getNumVertices();
    var ne = mesh.getNumEdges();
    var nf = mesh.getNumFacets();
        
    buf = addLine(buf, "        \"num " + hd + "verts\": " + nv + ",");
    buf = addLine(buf, "        \"num " + hd + "edges\": " + ne + ",");
    buf = addLine(buf, "        \"num " + hd + "faces\": " + nf + ",");
    buf = addLine(buf, "        \"" + hd + "vertices\": [" );
    
    var c = ","
    for (var i = 0; i < nv; i++)
    {
        var v = geom.getVertex(i);
        if (i == nv-1) c = "";
        buf = addLine(buf, "            [" + v.x + ", " + v.y + ", " + v.z + "]" + c)
    }    
    return buf;
}

function writeUVs(buf, geom, hd)
{    
    var uvs = geom.getUVs();
    var nuv = uvs.getNumValues();
    var label = uvs.getLabel();
    
    buf = addLine(buf, "        \"" + hd + "uvset\": \"" + label + "\",");    
    buf = addLine(buf, "        \"num " + hd + "uvs\": " + nuv + ",");
    buf = addLine(buf, "        \"" + hd + "uvs\": [" );    
    var c = ","
    for (var i = 0; i < nuv; i++)
    {
        var uv = uvs.getPnt2Vec(i);
        if (i == nuv-1) c = "";
        buf = addLine(buf, "            [" + uv.x + ", " + uv.y + "]" + c);
    }    
    return addLine(buf, "        ],");
}

function writeNormals(buf, geom, hd)
{    
    var nn = geom.getNumNormals();
    
    buf = addLine(buf, "        \"num " + hd + "normals\": " + nn + ",");
    buf = addLine(buf, "        \"" + hd + "normals\": [" );    
    var c = ","
    for (var i = 0; i < nn; i++)
    {
        var n = geom.getNormal(i);
        if (i == nn-1) c = "";
        buf = addLine(buf, "            [" + n.x + ", " + n.y + ", " + n.z + "]" + c)
    }    
    return addLine(buf, "        ],");
}

function writeFaces(buf, geom, hd)
{    
    var nf = geom.getNumFacets();
    buf = addLine(buf, "        \"" + hd + "faces\": [" );    
    var c = ","
    for (var i = 0; i < nf; i++)
    {
        var f = geom.getFacet(i);
        if (i == nf-1) c = "";
        buf = addLine(buf, "            " + f + c)
    }    
    return addLine(buf, "        ],");
}

//==============================================================================
// Find current duf scene path. (it should be saved untill export json)
//==============================================================================

function getScenePath()
{
    var fPath = Scene.getFilename(); //get current scene file path
    var val = fPath.left( fPath.length - 4 ) + ".dbz"; // .duf => .dbz
    return (val);
}


function addLine(buf, str)
{
    return (buf + str + "\n");
}


//==============================================================================
// Run it
//==============================================================================
exportHighdefToBlender()
