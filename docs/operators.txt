OPERATORS IN bpy.ops.daz

=================================================================

bpy.ops.daz.activate_all(prefix = "", type = "")

  Select all morphs of this type

Parameters:
  prefix (string) - prefix
  type (string) - type

-----------------------------------------------------------------

bpy.ops.daz.add_extra_face_bones(poseLayer = 8, drivenLayer = 32)

  Add an extra layer of face bones, which can be both driven and posed

Parameters:
  poseLayer (int) - Put the posable bones on this layer.
  drivenLayer (int) - Put the driven bones on this layer.

-----------------------------------------------------------------

bpy.ops.daz.add_hide_collections()

  Control visibility with rig property. For file linking.

-----------------------------------------------------------------

bpy.ops.daz.add_hide_drivers(hideOnlyMasked = False)

  Control visibility with rig property. For file linking.

Parameters:
  hideOnlyMasked (boolean) - Create visibility drivers only for masked meshes

-----------------------------------------------------------------

bpy.ops.daz.add_ik_goals()

  Add IK goals

-----------------------------------------------------------------

bpy.ops.daz.add_keyset(type = "", prefix = "")

  Add category morphs to active custom keying set, or make new one

Parameters:
  type (string) - type
  prefix (string) - prefix

-----------------------------------------------------------------

bpy.ops.daz.add_mannequin(headType = 'JAW', useGroup = True, group = "Mannequin")

  Add mannequins to selected meshes. Don't change rig after this.

Parameters:
  headType (enum in ['SOLID', 'JAW', 'FULL']) - How to make the mannequin head
  useGroup (boolean) - Add mannequin to collection
  group (string) - Add mannequin to this collection

-----------------------------------------------------------------

bpy.ops.daz.add_push()

  Add a push shapekey

-----------------------------------------------------------------

bpy.ops.daz.add_shapekey_drivers(filter = "", category = "Shapes")

  Add rig drivers to shapekeys

Parameters:
  filter (string) - Show only items containing this string
  category (string) - Add morphs to this category of custom morphs

-----------------------------------------------------------------

bpy.ops.daz.add_subsurf()

  Add a subsurf modifier

-----------------------------------------------------------------

bpy.ops.daz.add_to_group()

  Add all selected objects to group

-----------------------------------------------------------------

bpy.ops.daz.add_winder()

  Add winder to active posebone

-----------------------------------------------------------------

bpy.ops.daz.apply_morphs()

  Apply all shapekeys

-----------------------------------------------------------------

bpy.ops.daz.apply_rest_pose()

  Apply current pose at rest pose to selected rigs and children

-----------------------------------------------------------------

bpy.ops.daz.change_colors(color = (0.100,0.100,0.500,1.000))

  Change viewport colors of all materials of this object

Parameters:
  color (color) - Color

-----------------------------------------------------------------

bpy.ops.daz.change_resolution(steps = 2, overwrite = False)

  Change all textures of selected meshes with resized versions.
The resized textures must already exist.

Parameters:
  steps (int) - Resize original images with this number of steps
  overwrite (boolean) - Overwrite the original image files.

-----------------------------------------------------------------

bpy.ops.daz.change_skin_color(color = (0.100,0.100,0.500,1.000))

  Change viewport colors of all materials of this object

Parameters:
  color (color) - Color

-----------------------------------------------------------------

bpy.ops.daz.change_tweak_type()

  Change the selection of materials to tweak

-----------------------------------------------------------------

bpy.ops.daz.clear_morphs(type = "", prefix = "")

  Set all morphs of specified type to zero

Parameters:
  type (string) - type
  prefix (string) - prefix

-----------------------------------------------------------------

bpy.ops.daz.collapse_udims()

  Restrict UV coordinates to the [0:1] range

-----------------------------------------------------------------

bpy.ops.daz.color_hair(color = (0.100,0.100,0.500,1.000))

  Change particle hair color

Parameters:
  color (color) - Color

-----------------------------------------------------------------

bpy.ops.daz.connect_hair()

  (Re)connect hair

-----------------------------------------------------------------

bpy.ops.daz.convert_custom_morphs_to_shapekeys(filter = "", custom = '')

  Convert custom rig morphs to shapekeys

Parameters:
  filter (string) - Show only items containing this string
  custom (enum in []) - Category

-----------------------------------------------------------------

bpy.ops.daz.convert_mhx()

  Convert rig to MHX

-----------------------------------------------------------------

bpy.ops.daz.convert_rig(newRig = 'genesis_3_female')

  Convert current DAZ rig to other DAZ rig

Parameters:
  newRig (enum in ['genesis_3_female', 'genesis_2_female', 'genesis_8_female', 'cmu', 'genesis_3_male', 'genesis', 'genesis_8_male', 'genesis_2_male']) - Convert active rig to this

-----------------------------------------------------------------

bpy.ops.daz.convert_standard_morphs_to_shapekeys(filter = "", type = 'All')

  Convert standard face rig morphs to shapekeys

Parameters:
  filter (string) - Show only items containing this string
  type (enum in ['All', 'Units', 'Expressions', 'Visemes', 'Poses']) - Type

-----------------------------------------------------------------

bpy.ops.daz.copy_bone_drivers()

  Copy bone drivers from selected rig to active rig

-----------------------------------------------------------------

bpy.ops.daz.copy_bones()

  Copy selected rig bone locations to active rig

-----------------------------------------------------------------

bpy.ops.daz.copy_materials()

  Copy materials from active mesh to selected meshes

-----------------------------------------------------------------

bpy.ops.daz.copy_poses()

  Copy selected rig poses to active rig

-----------------------------------------------------------------

bpy.ops.daz.copy_props()

  Copy properties from selected objects to active object

-----------------------------------------------------------------

bpy.ops.daz.create_all_masks()

  Create vertex groups and mask modifiers in active mesh for all meshes belonging to same character

-----------------------------------------------------------------

bpy.ops.daz.create_collections()

  Create collections for each empty in scene

-----------------------------------------------------------------

bpy.ops.daz.create_graft_groups()

  Create vertex groups from graft information

-----------------------------------------------------------------

bpy.ops.daz.create_meta()

  Create a metarig from the active rig

-----------------------------------------------------------------

bpy.ops.daz.create_selected_masks()

  Create vertex groups and mask modifiers in active mesh for selected meshes

-----------------------------------------------------------------

bpy.ops.daz.deactivate_all(prefix = "", type = "")

  Unselect all morphs of this type

Parameters:
  prefix (string) - prefix
  type (string) - type

-----------------------------------------------------------------

bpy.ops.daz.decode_file(filter_glob = "*.dsf;*.duf;*.dbz", filepath = "")

  Decode a gzipped DAZ file (*.duf, *.dsf, *.dbz) to a text file

Parameters:
  filter_glob (string) - filter_glob
  filepath (string) - Filepath used for importing the file

-----------------------------------------------------------------

bpy.ops.daz.delete_lipsync()

  Delete F-curves associated with lipsync

-----------------------------------------------------------------

bpy.ops.daz.disable_drivers()

  Disable all face bone drivers to improve performance

-----------------------------------------------------------------

bpy.ops.daz.enable_addon(name = "")

  Enable/Disable add-on

Parameters:
  name (string) - name

-----------------------------------------------------------------

bpy.ops.daz.enable_drivers()

  Enable all face bone drivers

-----------------------------------------------------------------

bpy.ops.daz.error()

  (undocumented operator)

-----------------------------------------------------------------

bpy.ops.daz.find_polys()

  (undocumented operator)

-----------------------------------------------------------------

bpy.ops.daz.find_seams()

  Create seams based on existing UVs

-----------------------------------------------------------------

bpy.ops.daz.fit_mesh_to_other()

  Fit current mesh to selected mesh

-----------------------------------------------------------------

bpy.ops.daz.force_update()

  Force all morphs to update

-----------------------------------------------------------------

bpy.ops.daz.get_finger_print()

  Get fingerprint of active character

-----------------------------------------------------------------

bpy.ops.daz.hair_add_pinning(pinningX0 = 0.250, pinningX1 = 0.750, pinningW0 = 1.000, pinningW1 = 0.000)

  Add HairPin group to hair strands

Parameters:
  pinningX0 (float) - Pin X0
  pinningX1 (float) - Pin X1
  pinningW0 (float) - Pin W0
  pinningW1 (float) - Pin W1

-----------------------------------------------------------------

bpy.ops.daz.hide_all(prefix = "")

  Hide all meshes/makeup of this rig

Parameters:
  prefix (string) - prefix

-----------------------------------------------------------------

bpy.ops.daz.import_action(clearBones = True, clearMorphs = True, clearObject = True, affectBones = True, affectMorphs = True, affectObject = True, reportMissingMorphs = False, affectSelectedOnly = False, convertPoses = False, srcCharacter = 'genesis_3_female', trgCharacter = 'genesis_3_female', makeNewAction = True, actionName = "Action", fps = 30.000, integerFrames = True, filter_glob = "*.dsf;*.duf;*.DSF;*.DUF;*.png;*.jpeg;*.jpg;*.bmp", filepath = "", files = None, directory = "")

  Import poses from native DAZ file(s) (*.duf, *.dsf) to action

Parameters:
  clearBones (boolean) - Clear bones pose before adding new one
  clearMorphs (boolean) - Clear morph pose before adding new one
  clearObject (boolean) - Clear object pose before adding new one
  affectBones (boolean) - Animate bones.
  affectMorphs (boolean) - Animate morph properties.
  affectObject (boolean) - Animate global object transformation
  reportMissingMorphs (boolean) - Print a list of missing morphs.
  affectSelectedOnly (boolean) - Only animate selected bones.
  convertPoses (boolean) - Attempt to convert poses to the current rig.
  srcCharacter (enum in ['genesis_3_female', 'genesis_2_female', 'genesis_8_female', 'cmu', 'genesis_3_male', 'genesis', 'genesis_8_male', 'genesis_2_male']) - Character this file was made for
  trgCharacter (enum in ['genesis_3_female', 'genesis_2_female', 'genesis_8_female', 'cmu', 'genesis_3_male', 'genesis', 'genesis_8_male', 'genesis_2_male']) - Active character
  makeNewAction (boolean) - Unlink current action and make a new one
  actionName (string) - Name of loaded action
  fps (float) - Animation FPS in Daz Studio
  integerFrames (boolean) - Round all keyframes to intergers
  filter_glob (string) - filter_glob
  filepath (file_path) - Filepath used for importing the file
  files (collection) - File Path
  directory (dir_path) - directory

-----------------------------------------------------------------

bpy.ops.daz.import_correctives(filter = "")

  Import corrective morphs

Parameters:
  filter (string) - Show only items containing this string

-----------------------------------------------------------------

bpy.ops.daz.import_custom_morphs(filter_glob = "*.duf;*.dsf;*.png;*.jpeg;*.jpg;*.bmp", filepath = "", files = None, directory = "", catname = "Shapes", usePropDrivers = True)

  Import morphs from native DAZ files (*.duf, *.dsf)

Parameters:
  filter_glob (string) - filter_glob
  filepath (file_path) - Filepath used for importing the file
  files (collection) - File Path
  directory (dir_path) - directory
  catname (string) - Category
  usePropDrivers (boolean) - Control morphs with rig properties

-----------------------------------------------------------------

bpy.ops.daz.import_daz(filter_glob = "*.duf;*.dsf;*.png;*.jpeg;*.jpg;*.bmp", filepath = "", unitScale = 0.010, skinColor = (0.600,0.400,0.250,1.000), clothesColor = (0.090,0.010,0.015,1.000), brightenEyes = 1.000, fitMeshes = 'DBZFILE', useAutoMaterials = True, handleOpaque = 'BSDF', handleRefractive = 'GUESS', handleVolumetric = 'VOLUMETRIC', useEnvironment = True)

  Import a native DAZ file (*.duf, *.dsf, *.dse)

Parameters:
  filter_glob (string) - filter_glob
  filepath (string) - Filepath used for importing the file
  unitScale (float) - Scale used to convert between DAZ and Blender units. Default unit meters
  skinColor (color) - Skin Color
  clothesColor (color) - Clothes Color
  brightenEyes (float) - Brighten eye textures with this factor
to avoid dark eyes problem for Genesis 8
  fitMeshes (enum in ['SHARED', 'UNIQUE', 'DBZFILE']) - Mesh fitting method
  useAutoMaterials (boolean) - Use best shaders for material, independent of the settings below
  handleOpaque (enum in ['BSDF', 'PRINCIPLED', 'EEVEE']) - Default method used for opaque materials.
Ignored by some materials.
  handleRefractive (enum in ['BSDF', 'PRINCIPLED', 'GUESS', 'EEVEE']) - Default method used for refractive materials.
Ignored by some materials.
  handleVolumetric (enum in ['VOLUMETRIC', 'TRANSLUCENCY', 'SSS']) - Method for handle volumetric (Iray skin)
  useEnvironment (boolean) - Load environment

-----------------------------------------------------------------

bpy.ops.daz.import_expressions(filter = "")

  Import expression morphs

Parameters:
  filter (string) - Show only items containing this string

-----------------------------------------------------------------

bpy.ops.daz.import_flexions(filter = "")

  Import flexion morphs

Parameters:
  filter (string) - Show only items containing this string

-----------------------------------------------------------------

bpy.ops.daz.import_json(filter_glob = "*.json", filepath = "", files = None, directory = "")

  Import JSON file(s) (*.json) as morphs

Parameters:
  filter_glob (string) - filter_glob
  filepath (file_path) - Filepath used for importing the file
  files (collection) - File Path
  directory (dir_path) - directory

-----------------------------------------------------------------

bpy.ops.daz.import_node_poses(clearBones = True, clearMorphs = True, clearObject = True, affectBones = True, affectMorphs = True, affectObject = True, reportMissingMorphs = False, affectSelectedOnly = False, convertPoses = False, srcCharacter = 'genesis_3_female', trgCharacter = 'genesis_3_female', makeNewAction = True, actionName = "Action", fps = 30.000, integerFrames = True, filter_glob = "*.dsf;*.duf;*.DSF;*.DUF;*.png;*.jpeg;*.jpg;*.bmp", filepath = "", files = None, directory = "")

  Import node poses from native DAZ file(s) (*.duf, *.dsf)

Parameters:
  clearBones (boolean) - Clear bones pose before adding new one
  clearMorphs (boolean) - Clear morph pose before adding new one
  clearObject (boolean) - Clear object pose before adding new one
  affectBones (boolean) - Animate bones.
  affectMorphs (boolean) - Animate morph properties.
  affectObject (boolean) - Animate global object transformation
  reportMissingMorphs (boolean) - Print a list of missing morphs.
  affectSelectedOnly (boolean) - Only animate selected bones.
  convertPoses (boolean) - Attempt to convert poses to the current rig.
  srcCharacter (enum in ['genesis_3_female', 'genesis_2_female', 'genesis_8_female', 'cmu', 'genesis_3_male', 'genesis', 'genesis_8_male', 'genesis_2_male']) - Character this file was made for
  trgCharacter (enum in ['genesis_3_female', 'genesis_2_female', 'genesis_8_female', 'cmu', 'genesis_3_male', 'genesis', 'genesis_8_male', 'genesis_2_male']) - Active character
  makeNewAction (boolean) - Unlink current action and make a new one
  actionName (string) - Name of loaded action
  fps (float) - Animation FPS in Daz Studio
  integerFrames (boolean) - Round all keyframes to intergers
  filter_glob (string) - filter_glob
  filepath (file_path) - Filepath used for importing the file
  files (collection) - File Path
  directory (dir_path) - directory

-----------------------------------------------------------------

bpy.ops.daz.import_pose_morphs(filter = "")

  Import pose morphs

Parameters:
  filter (string) - Show only items containing this string

-----------------------------------------------------------------

bpy.ops.daz.import_poselib(clearBones = True, clearMorphs = True, clearObject = True, affectBones = True, affectMorphs = True, affectObject = True, reportMissingMorphs = False, affectSelectedOnly = False, convertPoses = False, srcCharacter = 'genesis_3_female', trgCharacter = 'genesis_3_female', makeNewPoseLib = True, poseLibName = "PoseLib", filter_glob = "*.dsf;*.duf;*.DSF;*.DUF;*.png;*.jpeg;*.jpg;*.bmp", filepath = "", files = None, directory = "")

  Import poses from native DAZ file(s) (*.duf, *.dsf) to pose library

Parameters:
  clearBones (boolean) - Clear bones pose before adding new one
  clearMorphs (boolean) - Clear morph pose before adding new one
  clearObject (boolean) - Clear object pose before adding new one
  affectBones (boolean) - Animate bones.
  affectMorphs (boolean) - Animate morph properties.
  affectObject (boolean) - Animate global object transformation
  reportMissingMorphs (boolean) - Print a list of missing morphs.
  affectSelectedOnly (boolean) - Only animate selected bones.
  convertPoses (boolean) - Attempt to convert poses to the current rig.
  srcCharacter (enum in ['genesis_3_female', 'genesis_2_female', 'genesis_8_female', 'cmu', 'genesis_3_male', 'genesis', 'genesis_8_male', 'genesis_2_male']) - Character this file was made for
  trgCharacter (enum in ['genesis_3_female', 'genesis_2_female', 'genesis_8_female', 'cmu', 'genesis_3_male', 'genesis', 'genesis_8_male', 'genesis_2_male']) - Active character
  makeNewPoseLib (boolean) - Unlink current pose library and make a new one
  poseLibName (string) - Name of loaded pose library
  filter_glob (string) - filter_glob
  filepath (file_path) - Filepath used for importing the file
  files (collection) - File Path
  directory (dir_path) - directory

-----------------------------------------------------------------

bpy.ops.daz.import_single_pose(clearBones = True, clearMorphs = True, clearObject = True, affectBones = True, affectMorphs = True, affectObject = True, reportMissingMorphs = False, affectSelectedOnly = False, convertPoses = False, srcCharacter = 'genesis_3_female', trgCharacter = 'genesis_3_female', filter_glob = "*.dsf;*.duf;*.DSF;*.DUF;*.png;*.jpeg;*.jpg;*.bmp", filepath = "", files = None, directory = "")

  Import a pose from native DAZ file(s) (*.duf, *.dsf)

Parameters:
  clearBones (boolean) - Clear bones pose before adding new one
  clearMorphs (boolean) - Clear morph pose before adding new one
  clearObject (boolean) - Clear object pose before adding new one
  affectBones (boolean) - Animate bones.
  affectMorphs (boolean) - Animate morph properties.
  affectObject (boolean) - Animate global object transformation
  reportMissingMorphs (boolean) - Print a list of missing morphs.
  affectSelectedOnly (boolean) - Only animate selected bones.
  convertPoses (boolean) - Attempt to convert poses to the current rig.
  srcCharacter (enum in ['genesis_3_female', 'genesis_2_female', 'genesis_8_female', 'cmu', 'genesis_3_male', 'genesis', 'genesis_8_male', 'genesis_2_male']) - Character this file was made for
  trgCharacter (enum in ['genesis_3_female', 'genesis_2_female', 'genesis_8_female', 'cmu', 'genesis_3_male', 'genesis', 'genesis_8_male', 'genesis_2_male']) - Active character
  filter_glob (string) - filter_glob
  filepath (file_path) - Filepath used for importing the file
  files (collection) - File Path
  directory (dir_path) - directory

-----------------------------------------------------------------

bpy.ops.daz.import_units(filter = "")

  Import face unit morphs

Parameters:
  filter (string) - Show only items containing this string

-----------------------------------------------------------------

bpy.ops.daz.import_visemes(filter = "")

  Import viseme morphs

Parameters:
  filter (string) - Show only items containing this string

-----------------------------------------------------------------

bpy.ops.daz.inspect_prop_dependencies()

  List properties depending on other properties

-----------------------------------------------------------------

bpy.ops.daz.inspect_prop_groups()

  Show the property groups for the selected posebones.

-----------------------------------------------------------------

bpy.ops.daz.key_morphs(type = "", prefix = "")

  Set keys for all morphs of specified type at current frame

Parameters:
  type (string) - type
  prefix (string) - prefix

-----------------------------------------------------------------

bpy.ops.daz.launch_editor(shows = None)

  Edit materials of selected meshes

Parameters:
  shows (collection) - shows

-----------------------------------------------------------------

bpy.ops.daz.list_bones()

  (undocumented operator)

-----------------------------------------------------------------

bpy.ops.daz.load_default_settings()

  (undocumented operator)

-----------------------------------------------------------------

bpy.ops.daz.load_factory_settings()

  (undocumented operator)

-----------------------------------------------------------------

bpy.ops.daz.load_moho(filter_glob = "*.dat", filepath = "")

  Load Moho (.dat) file

Parameters:
  filter_glob (string) - filter_glob
  filepath (string) - Filepath used for importing the file

-----------------------------------------------------------------

bpy.ops.daz.load_pose(filter_glob = "*.json", filepath = "")

  (undocumented operator)

Parameters:
  filter_glob (string) - filter_glob
  filepath (string) - Filepath used for importing the file

-----------------------------------------------------------------

bpy.ops.daz.load_settings_file(filepath = "", filter_glob = "*.json")

  Load settings from file

Parameters:
  filepath (string) - Filepath used for importing the file
  filter_glob (string) - filter_glob

-----------------------------------------------------------------

bpy.ops.daz.load_uv(filter_glob = "*.dsf;*.duf;*.dbz", filepath = "")

  Load a UV set to the active mesh

Parameters:
  filter_glob (string) - filter_glob
  filepath (string) - Filepath used for importing the file

-----------------------------------------------------------------

bpy.ops.daz.make_all_bones_posable(poseLayer = 8, drivenLayer = 32)

  Add an extra layer of driven bones, to make them posable

Parameters:
  poseLayer (int) - Put the posable bones on this layer.
  drivenLayer (int) - Put the driven bones on this layer.

-----------------------------------------------------------------

bpy.ops.daz.make_deflection()

  Make a deflection object

-----------------------------------------------------------------

bpy.ops.daz.make_faithful_proxy()

  Replace all selected meshes by low-poly versions, using a experimental algorithm that does preserve UV seams

-----------------------------------------------------------------

bpy.ops.daz.make_hair(color = (0.500,0.050,0.100,1.000), sparsity = 1, size = 20, resizeHair = False, resizeInBlocks = False, skullType = 'TOP')

  Make particle hair from mesh hair

Parameters:
  color (color) - Hair Color
  sparsity (int) - Only use every n:th hair
  size (int) - Hair length
  resizeHair (boolean) - Resize hair afterwards
  resizeInBlocks (boolean) - Resize hair in blocks of ten afterwards
  skullType (enum in ['NONE', 'TOP', 'ALL']) - Vertex group to control hair density

-----------------------------------------------------------------

bpy.ops.daz.make_quick_proxy(iterations = 2)

  Replace all selected meshes by low-poly versions, using a quick algorithm that does not preserve UV seams

Parameters:
  iterations (int) - Number of iterations when 

-----------------------------------------------------------------

bpy.ops.daz.make_udim_materials(umats = None)

  Combine materials of selected mesh into a single UDIM material

Parameters:
  umats (collection) - umats

-----------------------------------------------------------------

bpy.ops.daz.merge_geografts()

  Merge selected geografts to active object

-----------------------------------------------------------------

bpy.ops.daz.merge_materials()

  Merge identical materials

-----------------------------------------------------------------

bpy.ops.daz.merge_rigs(clothesLayer = 3)

  Merge selected rigs to active rig

Parameters:
  clothesLayer (int) - Bone layer used for extra bones when merging clothes

-----------------------------------------------------------------

bpy.ops.daz.merge_shapekeys(shape1 = '', shape2 = '')

  Merge shapekeys

Parameters:
  shape1 (enum in []) - Shapekey to keep
  shape2 (enum in []) - Shapekey to merge

-----------------------------------------------------------------

bpy.ops.daz.merge_toes()

  Merge all toes

-----------------------------------------------------------------

bpy.ops.daz.merge_uv_layers()

  Merge active UV layer with render UV layer

-----------------------------------------------------------------

bpy.ops.daz.mesh_add_pinning(pinningX0 = 0.250, pinningX1 = 0.750, pinningW0 = 1.000, pinningW1 = 0.000)

  Add HairPin group to mesh hair

Parameters:
  pinningX0 (float) - Pin X0
  pinningX1 (float) - Pin X1
  pinningW0 (float) - Pin W0
  pinningW1 (float) - Pin W1

-----------------------------------------------------------------

bpy.ops.daz.optimize_pose()

  Optimize rest pose for IK. Incompatible with pose loading.

-----------------------------------------------------------------

bpy.ops.daz.pin_prop(key = "", type = "", prefix = "")

  Pin property

Parameters:
  key (string) - key
  type (string) - type
  prefix (string) - prefix

-----------------------------------------------------------------

bpy.ops.daz.pose_disable_all_layers()

  (undocumented operator)

-----------------------------------------------------------------

bpy.ops.daz.pose_enable_all_layers()

  (undocumented operator)

-----------------------------------------------------------------

bpy.ops.daz.prettify()

  Change sliders to checkboxes
(If boolean options appear as sliders, use this button to refresh them)

-----------------------------------------------------------------

bpy.ops.daz.print_matrix()

  (undocumented operator)

-----------------------------------------------------------------

bpy.ops.daz.print_statistics()

  (undocumented operator)

-----------------------------------------------------------------

bpy.ops.daz.prune_action()

  Remove F-curves with a single zero key

-----------------------------------------------------------------

bpy.ops.daz.prune_uv_maps()

  Remove unused UV maps

-----------------------------------------------------------------

bpy.ops.daz.prune_vertex_groups()

  Remove vertices and groups with zero weights

-----------------------------------------------------------------

bpy.ops.daz.quadify()

  Join triangles to quads

-----------------------------------------------------------------

bpy.ops.daz.refresh_addons(name = "")

  Reload add-ons

Parameters:
  name (string) - name

-----------------------------------------------------------------

bpy.ops.daz.remove_all_morph_drivers()

  Remove drivers associated with morphs (not corrective shapekeys)

-----------------------------------------------------------------

bpy.ops.daz.remove_categories(filter = "")

  Remove selected categories and associated drivers

Parameters:
  filter (string) - Show only items containing this string

-----------------------------------------------------------------

bpy.ops.daz.remove_custom_morphs(filter = "", custom = '', deleteShapekeys = True)

  Remove specific custom morphs and their associated drivers

Parameters:
  filter (string) - Show only items containing this string
  custom (enum in []) - Category
  deleteShapekeys (boolean) - Delete both drivers and shapekeys

-----------------------------------------------------------------

bpy.ops.daz.remove_from_groups()

  Remove selected objects from group (or all groups if none given)

-----------------------------------------------------------------

bpy.ops.daz.remove_hide_collections()

  Remove ability to control visibility from rig property

-----------------------------------------------------------------

bpy.ops.daz.remove_hide_drivers()

  Remove ability to control visibility from rig property

-----------------------------------------------------------------

bpy.ops.daz.remove_shapekey_drivers(filter = "")

  Remove rig drivers from shapekeys

Parameters:
  filter (string) - Show only items containing this string

-----------------------------------------------------------------

bpy.ops.daz.remove_standard_morphs(filter = "", type = 'All', deleteShapekeys = True)

  Remove specific standard morphs and their associated drivers

Parameters:
  filter (string) - Show only items containing this string
  type (enum in ['All', 'Units', 'Expressions', 'Visemes', 'Poses']) - Type
  deleteShapekeys (boolean) - Delete both drivers and shapekeys

-----------------------------------------------------------------

bpy.ops.daz.remove_unused_drivers()

  Remove unused drivers

-----------------------------------------------------------------

bpy.ops.daz.rename_category(custom = '', category = "Shapes")

  Rename selected category

Parameters:
  custom (enum in []) - Category
  category (string) - Add morphs to this category of custom morphs

-----------------------------------------------------------------

bpy.ops.daz.reparent_bones()

  Reparent selected bones to active

-----------------------------------------------------------------

bpy.ops.daz.reparent_toes()

  Parent small toes to big toe bone

-----------------------------------------------------------------

bpy.ops.daz.reset_material()

  Reset material to original

-----------------------------------------------------------------

bpy.ops.daz.resize_textures(filter_glob = "*.png;*.jpeg;*.jpg;*.bmp;*.tif;*.tiff", filepath = "", files = None, directory = "", steps = 2, overwrite = False)

  Replace all textures of selected meshes with resized versions.
Python and OpenCV must be installed on your system.

Parameters:
  filter_glob (string) - filter_glob
  filepath (file_path) - Filepath used for importing the file
  files (collection) - File Path
  directory (dir_path) - directory
  steps (int) - Resize original images with this number of steps
  overwrite (boolean) - Overwrite the original image files.

-----------------------------------------------------------------

bpy.ops.daz.restore_current_frame()

  Restore all poses for current frame from stored actions

-----------------------------------------------------------------

bpy.ops.daz.restore_shapekey_drivers()

  Restore corrupt shapekey drivers, or change driver target

-----------------------------------------------------------------

bpy.ops.daz.restore_udims()

  Restore original UV coordinates outside the [0:1] range

-----------------------------------------------------------------

bpy.ops.daz.retarget_mesh_drivers()

  Retarget drivers of selected objects to active object

-----------------------------------------------------------------

bpy.ops.daz.rigify_daz()

  Convert active rig to rigify

-----------------------------------------------------------------

bpy.ops.daz.rigify_meta()

  Convert metarig to rigify

-----------------------------------------------------------------

bpy.ops.daz.rotate_bones(X = 0.000, Y = 0.000, Z = 0.000)

  Rotate selected bones the same angle

Parameters:
  X (float) - X
  Y (float) - Y
  Z (float) - Z

-----------------------------------------------------------------

bpy.ops.daz.save_addons(name = "")

  Save add-ons settings

Parameters:
  name (string) - name

-----------------------------------------------------------------

bpy.ops.daz.save_current_frame()

  Save all poses for current frame in new actions

-----------------------------------------------------------------

bpy.ops.daz.save_current_pose(check_existing = True, filter_glob = "*.json", filepath = "", skeleton = True, pose = True)

  (undocumented operator)

Parameters:
  check_existing (boolean) - Check and warn on overwriting existing files
  filter_glob (string) - filter_glob
  filepath (string) - Filepath used for exporting the .json file
  skeleton (boolean) - skeleton
  pose (boolean) - pose

-----------------------------------------------------------------

bpy.ops.daz.save_default_settings()

  Save current settings as default

-----------------------------------------------------------------

bpy.ops.daz.save_local_textures()

  Copy textures to the textures subfolder in the blend file's directory

-----------------------------------------------------------------

bpy.ops.daz.save_settings_file(check_existing = True, filter_glob = "*.json", filepath = "")

  Save current settings to file

Parameters:
  check_existing (boolean) - Check and warn on overwriting existing files
  filter_glob (string) - filter_glob
  filepath (string) - Filepath used for exporting the .json file

-----------------------------------------------------------------

bpy.ops.daz.select_all()

  Select all

-----------------------------------------------------------------

bpy.ops.daz.select_all_morphs(type = "", value = False)

  Select/Deselect all morphs in this section

Parameters:
  type (string) - type
  value (boolean) - value

-----------------------------------------------------------------

bpy.ops.daz.select_none()

  Select none

-----------------------------------------------------------------

bpy.ops.daz.select_random_strands(fraction = 0.500)

  Select random subset of strands selected in UV space

Parameters:
  fraction (float) - Fraction of strands to keep

-----------------------------------------------------------------

bpy.ops.daz.set_silent_mode()

  Toggle silent mode on or off (error popups off or on)

-----------------------------------------------------------------

bpy.ops.daz.set_udims(tile = 1001)

  Move all UV coordinates to specified UV tile
Do this on geografts before merging.

Parameters:
  tile (int) - Tile

-----------------------------------------------------------------

bpy.ops.daz.show_addon(name = "")

  Show/Hide add-on

Parameters:
  name (string) - name

-----------------------------------------------------------------

bpy.ops.daz.show_all(prefix = "")

  Show all meshes/makeup of this rig

Parameters:
  prefix (string) - prefix

-----------------------------------------------------------------

bpy.ops.daz.snap_fk_ik(data = "")

  (undocumented operator)

Parameters:
  data (string) - data

-----------------------------------------------------------------

bpy.ops.daz.snap_ik_fk(data = "")

  (undocumented operator)

Parameters:
  data (string) - data

-----------------------------------------------------------------

bpy.ops.daz.split_ngons()

  Split all polygons with five or more corners into triangles

-----------------------------------------------------------------

bpy.ops.daz.toggle_all_cats(useOpen = False)

  Toggle all morph categories on and off

Parameters:
  useOpen (boolean) - useOpen

-----------------------------------------------------------------

bpy.ops.daz.toggle_fk_ik(toggle = "")

  (undocumented operator)

Parameters:
  toggle (string) - toggle

-----------------------------------------------------------------

bpy.ops.daz.toggle_hints()

  Toggle hints for elbow and knee bending. It may be necessary to turn these off for correct FK->IK snapping.

-----------------------------------------------------------------

bpy.ops.daz.toggle_limits()

  Toggle rotation limits

-----------------------------------------------------------------

bpy.ops.daz.toggle_loc_locks()

  Toggle location locks

-----------------------------------------------------------------

bpy.ops.daz.toggle_rot_locks()

  Toggle rotation locks

-----------------------------------------------------------------

bpy.ops.daz.transfer_correctives(filter = "", useDriver = True, useSelectedOnly = False, ignoreRigidity = False)

  Transfer corrective shapekeys and drivers from active to selected

Parameters:
  filter (string) - Show only items containing this string
  useDriver (boolean) - Transfer both shapekeys and drivers
  useSelectedOnly (boolean) - Only copy to selected vertices
  ignoreRigidity (boolean) - Ignore rigidity groups when auto-transfer morphs.
Morphs may differ from DAZ Studio.

-----------------------------------------------------------------

bpy.ops.daz.transfer_other_morphs(filter = "", useDriver = True, useSelectedOnly = False, ignoreRigidity = False)

  Transfer all shapekeys except correctives with drivers from active to selected

Parameters:
  filter (string) - Show only items containing this string
  useDriver (boolean) - Transfer both shapekeys and drivers
  useSelectedOnly (boolean) - Only copy to selected vertices
  ignoreRigidity (boolean) - Ignore rigidity groups when auto-transfer morphs.
Morphs may differ from DAZ Studio.

-----------------------------------------------------------------

bpy.ops.daz.unkey_morphs(type = "", prefix = "")

  Remove keys from all morphs of specified type at current frame

Parameters:
  type (string) - type
  prefix (string) - prefix

-----------------------------------------------------------------

bpy.ops.daz.update()

  (undocumented operator)

-----------------------------------------------------------------

bpy.ops.daz.update_all()

  Update everything. Try this if driven bones are messed up

-----------------------------------------------------------------

bpy.ops.daz.update_hair()

  Change settings for particle hair

-----------------------------------------------------------------

bpy.ops.daz.update_morph_paths()

  Update paths to predefined morphs

-----------------------------------------------------------------

bpy.ops.daz.update_morphs(key = "", type = "", prefix = "")

  Set keys at current frame for all props of specified type with keys

Parameters:
  key (string) - key
  type (string) - type
  prefix (string) - prefix

-----------------------------------------------------------------

bpy.ops.daz.update_prop_limits()

  Update min and max value for properties

-----------------------------------------------------------------

